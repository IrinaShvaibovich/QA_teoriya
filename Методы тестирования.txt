Тестирование программного обеспечения - это оценка разрабатываемого программного обеспечения/продукта, 
чтобы проверить его возможности, способности и соответствие ожидаемым результатам. Существуют различные
 типы методов, используемые в области тестирования и обеспечения качества о них и пойдет речь в данной статье. 
Тестирование программного обеспечения является неотъемлемой частью цикла разработки программного обеспечения. 
  Что такое тестирование программного обеспечения? Тестирование программного обеспечения - это не что иное,
 как испытание куска кода к контролируемым и неконтролируемым условиям эксплуатации, наблюдение за выходом,
 а затем изучение, соответствует ли он предварительно определенным условиям. Различные наборы тест-кейсов и
 стратегий тестирования направлены на достижение одной общей цели - устранение багов и ошибок в коде,
 и обеспечения точной и оптимальной производительности программного обеспечения.   Методика тестирования Широко
 используемыми методами тестирования являются
 -модульное тестирование, 
 -интеграционное тестирование,
 -приемочное тестирование, и
 -тестирование системы.
 Программное обеспечение подвергается этим испытаниям в определенном порядке. 
  1) Модульное тестирование
 2) Интеграционное тестирование 
3) Системное тестирование
 4) Приемочные испытания   
   Модульное тестирование В первую очередь проводится модульный тест. Как подсказывает название,
 это метод испытания на объектном уровне. Отдельные программные компоненты тестируются на наличие ошибок.
 Для этого теста требуется точное знание программы и каждого установленного модуля. Таким образом,
 эта проверка осуществляется программистами, а не тестерами. Для этого создаются тест-коды, которые 
проверяют, ведет ли программное обеспечение себя так, как задумывалось.  
    Интеграционное тестирование Отдельные модули, которые уже были подвергнуты модульному тестированию,
 интегрируются друг с другом, и проверяются на наличие неисправностей. Такой тип тестирования в первую очередь 
выявляет ошибки интерфейса. Интеграционное тестирование можно осуществлять с помощью подхода "сверху вниз",
 следуя архитектурному сооружению системы. Другим подходом является подход «снизу вверх», который осуществляется
 из нижней части потока управления.  
   Системное тестирование В этом тестировании, вся система проверяется на наличие ошибок и багов.
 Этот тест осуществляется путем сопряжения аппаратных и программных компонентов всей системы, и затем
выполняется ее проверка. Это тестирование числится под методом тестирования "черного ящика", где проверяются
 ожидаемые для пользователя условия работы программного обеспечения.  
    Приемочные испытания Это последний тест, который проводится перед передачей программного обеспечения клиенту.
 Он проводится, чтобы гарантировать, что программное обеспечение, которое было разработано отвечает всем
 требованиям заказчика. Существует два типа приемо-сдаточных испытаний - то, которое осуществляется членами 
команды разработчиков, известно, как внутреннее приемочное тестирования (Альфа-тестирование), а другое, которое 
проводится заказчиком, известно, как внешнее приемочное тестирования. Если тестирование проводится с помощью 
предполагаемых клиентов, оно называется приемочными испытаниями клиента. В случае если тестирование проводится
 конечным пользователем программного обеспечения, оно известно, как приемочное тестирование (бета-тестирование).
   Основные тесты Есть несколько основных методов тестирования, которые формируют часть режима тестирования
 программного обеспечения. Эти тесты обычно считаются самодостаточными в поиске ошибок и багов во всей системе. 
  Тестирование методом черного ящика Тестирование методом черного ящика осуществляется без каких-либо знаний
внутренней работы системы. Тестер будет стимулировать программное обеспечение для пользовательской среды,
 предоставляя различные входы и тестируя сгенерированные выходы. Этот тест также известен как Black-box, 
closed-box тестирование или функциональное тестирование.   Тестирование методом белого ящика Тестирование 
методом "Белого ящика", в отличие от "черного ящика", учитывает внутреннее функционирование и логику работы кода.
 Для выполнения этого теста, тестер должен иметь знания кода, чтобы узнать точную часть кода, имеющую ошибки. Этот 
тест также известен как White-box, Open-Box или Glass box тестирование. Подробнее о тестирование методом белого
 ящика   Тестирование методом серого ящика Тестирование методом серого ящика или Gray box тестирование, это что-то
 среднее между White Box и Black Box тестированием, где тестер обладает лишь общими знаниями данного продукта, 
необходимыми для выполнения теста. Эта проверка осуществляется посредством документации и схемы информационных 
потоков. Тестирование проводится конечным пользователем, или пользователям, которые представляются как конечные.  
 Нефункциональные тесты Тестирование безопасности Безопасность приложения является одной из главных задач 
разработчика. Тестирование безопасности проверяет программное обеспечение на обеспечение конфиденциальности,
 целостности, аутентификации, доступности и безотказности. Индивидуальные испытания проводятся в целях предотвращения
 несанкционированного доступа в программный код.   Стресс-тестирование Стресс-тестирование является методом, при
 котором программное обеспечение подвергается воздействию условий, которые выходят за рамки нормальных условий работы 
программного обеспечения. После достижения критической точки, полученные результаты записываются. Этот тест 
определяет устойчивость всей системы.   Тестирование на совместимость Программное обеспечение проверяется на 
совместимость с внешними интерфейсами, такими как операционные системы, аппаратные платформы, веб-браузеры и т.д.
 Тест на совместимость проверяет, совместим ли продукт с любой программной платформой.   Тестирование эффективности 
Как подсказывает название, эта методика тестирования проверяет объем кода или ресурсов, которые используются 
программой при выполнении одной операции.   Юзабилити-тестирование Это тестирование проверяет аспект удобства и 
практичности программного обеспечения для пользователей. Легкость, с которой пользователь может получить доступ к
 устройству формирует основную точку тестирования. Юзабилити-тестирование охватывает пять аспектов тестирования,
 - обучаемость, эффективность, удовлетворенность, запоминаемость, и ошибки.   Тесты в процессе разработки
 программного обеспечения   Каскадная модель Каскадная модель использует подход "сверху-вниз", независимо от того,
 используется ли она для разработки программного обеспечения или для тестирования. Основными шагами, участвующими 
в данной методике тестирования программного обеспечения, являются: Анализ потребностей Тест дизайна Тест реализации 
Тестирование, отладка и проверка кода или продукта Внедрение и обслуживание В этой методике, вы переходите к
 следующему шагу только после того, как вы завершили предыдущий. В модели используется не-итерационный подход.
 Основным преимуществом данной методики является ее упрощенный, систематический и ортодоксальный подход. Тем не
 менее, она имеет много недостатков, так как баги и ошибки в коде не будут обнаружены до этапа тестирования. 
Зачастую это может привести к потере времени, денег, и других ценных ресурсов.   Agile Model Эта методика основана
 на избирательном сочетании последовательного и итеративного подхода, в дополнение к довольно большому разнообразию
 новых методов развития. Быстрое и поступательное развитие является одним из ключевых принципов этой методологии.
 Акцент делается на получение быстрых, практичных, и видимых выходов. Непрерывное взаимодействие с клиентами и
 участие является неотъемлемой частью всего процесса разработки.   Rapid Application Development (RAD). Методология
 быстрой разработки приложений Название говорит само за себя. В этом случае методология принимает стремительный 
эволюционный подход, используя принцип компонентной конструкции. После понимания различных требований данного проекта,
 готовится быстрый прототип, а затем сравнивается с ожидаемым набором выходных условий и стандартов. Необходимые 
изменения и модификации вносятся после совместного обсуждения с заказчиком или группой разработчиков (в контексте 
тестирования программного обеспечения). Хотя этот подход имеет свою долю преимуществ, он может быть неподходящим,
 если проект большой, сложный, или имеет чрезвычайно динамический характер, в котором требования постоянно меняются.
   Спиральная модель Как видно из названия, спиральная модель основана на подходе, в котором есть целый ряд циклов 
(или спиралей) из всех последовательных шагов в каскадной модели. После того, как начальный цикл будет завершена, 
выполняется тщательный анализ и обзор достигнутого продукта или выхода. Если выход не соответствует указанным 
требованиям или ожидаемым стандартам, производится второй цикл, и так далее.   Rational Unified Process (RUP).
 Рациональный унифицированный процесс Методика RUP также похожа на спиральную модель, в том смысле, что вся
 процедура тестирования разбивается на несколько циклов. Каждый цикл состоит из четырех этапов - создание,
 разработка, строительство, и переход. В конце каждого цикла продукт/выход пересматривается, и далее цикл (состоящий 
из тех же четырех фаз) следует при необходимости.   Применение информационных технологий растет с каждым днем, также 
и важность правильного тестирования программного обеспечения выросло в разы. Многие фирмы содержат для этого штат
 специальных команд, возможности которых находятся на уровне разработчиков.
