Принципы тестирования
1. Тестирование показывает наличие дефектов
Тестирование может показать наличие дефектов в программе, но не доказать их отсутствие. Тем не менее,
 важно составлять тест-кейсы, которые будут находить как можно больше багов. Таким образом, при должном 
тестовом покрытии, тестирование позволяет снизить вероятность наличия дефектов в программном обеспечении. 
В то же время, даже если дефекты не были найдены в процессе тестирования, нельзя утверждать, что их нет.
2. Исчерпывающее тестирование невозможно
Невозможно провести исчерпывающее тестирование, которое бы покрывало все комбинации пользовательского ввода 
и состояний системы, за исключениям совсем уж примитивных случаев. Вместо этого необходимо использовать
 анализ рисков и расстановку приоритетов, что позволит более эффективно распределять усилия по обеспечению
 качества ПО.
3. Раннее тестирование
Тестирование должно начинаться как можно раньше в жизненном цикле разработки программного обеспечения, 
и его усилия  должны быть сконцентрированы на определенных целях.
4. Скопление дефектов
Разные модули системы могут содержать разное количество дефектов – то есть, плотность скопления дефектов 
в разных элементах программы может отличаться. Усилия по тестированию должны распределяться пропорционально
 фактической плотности дефектов. В основном, большую часть критических дефектов находят в ограниченном
 количестве модулей. Это проявление принципа Парето: 80% проблем содержатся в 20% модулей.
5. Парадокс пестицида
Прогоняя одни и те же тесты вновь и вновь, Вы столкнетесь с тем, что они находят все меньше новых ошибок.
 Поскольку система эволюционирует, многие из ранее найденных дефектов исправляют и старые тест-кейсы больше
 не срабатывают.
Чтобы преодолеть этот парадокс, необходимо периодически вносить изменения в используемые наборы тестов,
 рецензировать и корректировать их с тем, чтобы они отвечали новому состоянию системы и позволяли 
находить как можно большее количество дефектов.
6. Тестирование зависит от контекста
Выбор методологии, техники и типа тестирования будет напрямую зависеть от природы самой программы. Например,
 программное обеспечение для медицинских нужд требует гораздо более строгой и тщательной проверки, чем, скажем,
 компьютерная игра. Из тех же соображений, сайт с большой посещаемостью должен пройти через серьезное 
тестирование производительности, чтобы показать возможность работы в условиях высокой нагрузки.
7. Заблуждение об отсутствии ошибок.
Тот факт, что тестирование не обнаружило дефектов, еще не значит, что программа готова к релизу.
 Нахождение и исправление дефектов будут не важны, если система окажется неудобной в использовании, и
 не будет удовлетворять ожиданиям и потребностям пользователя.
И еще несколько важных принципов:
— тестирование должно производиться независимыми специалистами;
— привлекайте лучших профессионалов;
— тестируйте как позитивные, так и негативные сценарии;
— не допускайте изменений в программе в процессе тестирования;
— указывайте ожидаемый результат выполнения тестов.
